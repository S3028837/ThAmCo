using Microsoft.EntityFrameworkCore;
namespace ThAmCo.Catering.Data
{
    public class CateringDbContext: DbContext
    {
        //Defining the database tables
        public DbSet<FoodBooking> FoodBookings {  get; set; }
        public DbSet<Menu> Menus { get; set; }
        public DbSet<MenuFoodItem> MenuFoodItems { get; set; }
        public DbSet<FoodItem> FoodItems { get; set; }



        //tells program where to save db
        private string DbPath {  get; set; } = string.Empty;
        public CateringDbContext()
        {
            var folder = Environment.SpecialFolder.MyDocuments;
            var path = Environment.GetFolderPath(folder);
            DbPath = Path.Join(path, "thAmCo.catering.db");
        }



        //specifies that SQlite will be used
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            optionsBuilder.UseSqlite("Data Source =" + DbPath);
        }



        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            //Defifning primary keys
            modelBuilder.Entity<FoodBooking>()
                .HasKey(fb => fb.FoodBookingId);

            modelBuilder.Entity<Menu>()
                .HasKey(m => m.MenuID);

            modelBuilder.Entity<FoodItem>()
                .HasKey(fi => fi.FoodItemId);

            //defining composite key
            modelBuilder.Entity<MenuFoodItem>()
                .HasKey(mfi => new {mfi.MenuId, mfi.FoodItemID});

            //Defining relationships for compisite key
            modelBuilder.Entity<Menu>()
                .HasMany(mfi => mfi.MenuFoodItems)
                .WithOne(m => m.Menu)
                .HasForeignKey(m => m.MenuId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<FoodItem>()
                .HasMany(mfi => mfi.MenuFoodItems)
                .WithOne(fi => fi.FoodItem)
                .OnDelete(DeleteBehavior.Restrict);
            //OnDelete prevents entries within table from being deleted

            //relationship between menu and foodBooking
            modelBuilder.Entity<Menu>()
                .HasMany(fb => fb.FoodBookings)
                .WithOne(m => m.Menu)
                .OnDelete(DeleteBehavior.Restrict);



            //Test data
            //Generated by AI (Microsoft Copilot)
            modelBuilder.Entity<FoodItem>().HasData(
                new FoodItem { FoodItemId = 1, Description = "Pizza", UnitPrice = 8.99f },
                new FoodItem { FoodItemId = 2, Description = "Burger", UnitPrice = 5.49f },
                new FoodItem { FoodItemId = 3, Description = "Pasta", UnitPrice = 7.99f },
                new FoodItem { FoodItemId = 4, Description = "Salad", UnitPrice = 4.99f },
                new FoodItem { FoodItemId = 5, Description = "Sushi", UnitPrice = 12.99f },
                new FoodItem { FoodItemId = 6, Description = "Steak", UnitPrice = 15.99f },
                new FoodItem { FoodItemId = 7, Description = "Tacos", UnitPrice = 3.99f },
                new FoodItem { FoodItemId = 8, Description = "Ice Cream", UnitPrice = 2.99f }
            );

            modelBuilder.Entity<Menu>().HasData(
                new Menu { MenuID = 1, MenuName = "Breakfast Menu" },
                new Menu { MenuID = 2, MenuName = "Lunch Menu" },
                new Menu { MenuID = 3, MenuName = "Dinner Menu" },
                new Menu { MenuID = 4, MenuName = "Dessert Menu" }
            );

            modelBuilder.Entity<MenuFoodItem>().HasData(
                new MenuFoodItem { MenuId = 1, FoodItemID = 1 },
                new MenuFoodItem { MenuId = 1, FoodItemID = 2 },
                new MenuFoodItem { MenuId = 2, FoodItemID = 3 },
                new MenuFoodItem { MenuId = 2, FoodItemID = 4 },
                new MenuFoodItem { MenuId = 3, FoodItemID = 5 },
                new MenuFoodItem { MenuId = 3, FoodItemID = 6 },
                new MenuFoodItem { MenuId = 4, FoodItemID = 7 },
                new MenuFoodItem { MenuId = 4, FoodItemID = 8 }
            );

            modelBuilder.Entity<FoodBooking>().HasData(
                new FoodBooking { FoodBookingId = 1, ClientReferenceId = 1, NumberOfGuests = 4, MenuId = 1 },
                new FoodBooking { FoodBookingId = 2, ClientReferenceId = 2, NumberOfGuests = 2, MenuId = 2 },
                new FoodBooking { FoodBookingId = 3, ClientReferenceId = 3, NumberOfGuests = 3, MenuId = 3 },
                new FoodBooking { FoodBookingId = 4, ClientReferenceId = 4, NumberOfGuests = 5, MenuId = 1 },
                new FoodBooking { FoodBookingId = 5, ClientReferenceId = 5, NumberOfGuests = 6, MenuId = 4 },
                new FoodBooking { FoodBookingId = 6, ClientReferenceId = 6, NumberOfGuests = 1, MenuId = 2 }
            );
        }
    }
}
