using Microsoft.EntityFrameworkCore;

namespace ThAmCo.Events.Data
{
    public class EventsDbContext : DbContext
    {
        //Db tables
        public DbSet<Event> Events { get; set; }
        public DbSet<Guest> Guests { get; set; }
        public DbSet<GuestBooking> GuestBookings { get; set; }
        public DbSet<Staff> Staffs { get; set; }
        public DbSet<Staffing> Staffings { get; set; }



        //tells program where to save db
        private string DbPath { get; set; } = string.Empty;
        public EventsDbContext()
        {
            var folder = Environment.SpecialFolder.MyDocuments;
            var path = Environment.GetFolderPath(folder);
            DbPath = Path.Join(path, "thAmCo.events.db");
        }



        //specifies that SQlite will be used
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            optionsBuilder.UseSqlite("Data Source =" + DbPath);
        }



        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            //Staffing composite key
            modelBuilder.Entity<Event>()
                .HasKey(e=>e.EventId);

            modelBuilder.Entity<Staff>()
                .HasKey(s=>s.StaffId);

            modelBuilder.Entity<Staffing>()
                .HasKey(st => new { st.StaffId, st.EventId });

            modelBuilder.Entity<Event>()
                .HasMany(st => st.Staffings)
                .WithOne(e => e.Event)
                .HasForeignKey(e => e.EventId);
                
            modelBuilder.Entity<Staff>()
                .HasMany(st => st.Staffings)
                .WithOne(s => s.Staff)
                .HasForeignKey(s=>s.StaffId);

            //Guest booking relationships
            modelBuilder.Entity<Event>()
                .HasMany(gb => gb.GuestBookings)
                .WithOne(e => e.Event);

            modelBuilder.Entity<Guest>()
                .HasMany(gb => gb.GuestBookings)
                .WithOne(g => g.Guest);
                



            //Test data
            //Generated by Microsoft Copilot
            // Seed Events
            modelBuilder.Entity<Event>().HasData(
                new Event { EventId = 1, ReservationReference = "1", FoodBookingId = 1, EventName = "New Year's Eve Gala", EventType = "Celebration", EventDate = new DateTime(2024, 12, 31) },
                new Event { EventId = 2, ReservationReference = "2", FoodBookingId = 2, EventName = "Corporate Retreat", EventType = "Business", EventDate = new DateTime(2024, 11, 15) },
                new Event { EventId = 3, ReservationReference = "3", FoodBookingId = 3, EventName = "Wedding Reception", EventType = "Celebration", EventDate = new DateTime(2024, 10, 20) },
                new Event { EventId = 4, ReservationReference = "4", FoodBookingId = 4, EventName = "Charity Fundraiser", EventType = "Fundraising", EventDate = new DateTime(2024, 09, 05) }
            );

            // Seed Guests
            modelBuilder.Entity<Guest>().HasData(
                new Guest { GuestId = 1, GuestName = "John Doe", GuestPhone = "123-456-7890", GuestEmail = "john.doe@example.com" },
                new Guest { GuestId = 2, GuestName = "Jane Smith", GuestPhone = "098-765-4321", GuestEmail = "jane.smith@example.com" },
                new Guest { GuestId = 3, GuestName = "Emily Davis", GuestPhone = "555-123-4567", GuestEmail = "emily.davis@example.com" },
                new Guest { GuestId = 4, GuestName = "Michael Brown", GuestPhone = "555-987-6543", GuestEmail = "michael.brown@example.com" },
                new Guest { GuestId = 5, GuestName = "Sarah Wilson", GuestPhone = "555-555-5555", GuestEmail = "sarah.wilson@example.com" }
            );

            // Seed GuestBookings
            modelBuilder.Entity<GuestBooking>().HasData(
                new GuestBooking { GuestBookingId = 1, GuestId = 1, EventId = 1, Attendance = false },
                new GuestBooking { GuestBookingId = 2, GuestId = 2, EventId = 1, Attendance = true },
                new GuestBooking { GuestBookingId = 3, GuestId = 3, EventId = 2, Attendance = true },
                new GuestBooking { GuestBookingId = 4, GuestId = 4, EventId = 3, Attendance = false },
                new GuestBooking { GuestBookingId = 5, GuestId = 5, EventId = 4, Attendance = true }
            );

            // Seed Staff
            modelBuilder.Entity<Staff>().HasData(
                new Staff { StaffId = 1, StaffName = "Alice Johnson", StaffEmail = "alice.johnson@example.com", FirstAidTrained = true },
                new Staff { StaffId = 2, StaffName = "Bob Brown", StaffEmail = "bob.brown@example.com", FirstAidTrained = false },
                new Staff { StaffId = 3, StaffName = "Charlie Green", StaffEmail = "charlie.green@example.com", FirstAidTrained = true },
                new Staff { StaffId = 4, StaffName = "Diana Prince", StaffEmail = "diana.prince@example.com", FirstAidTrained = true },
                new Staff { StaffId = 5, StaffName = "Ethan Hunt", StaffEmail = "ethan.hunt@example.com", FirstAidTrained = false }
            );

            // Seed Staffing
            modelBuilder.Entity<Staffing>().HasData(
                new Staffing { StaffId = 1, EventId = 1 },
                new Staffing { StaffId = 2, EventId = 1 },
                new Staffing { StaffId = 3, EventId = 2 },
                new Staffing { StaffId = 4, EventId = 3 },
                new Staffing { StaffId = 5, EventId = 4 }
            );
        }
    }
}
